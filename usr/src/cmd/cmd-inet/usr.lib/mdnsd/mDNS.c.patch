# illumos revision
--- usr/src/contrib/mDNSResponder/mDNSCore/mDNS.c	2017-07-24 09:23:31.000000000 -0500
+++ usr/src/cmd/cmd-inet/usr.lib/mdnsd/mDNS.c	2017-07-24 09:23:46.000000000 -0500
@@ -2036,7 +2036,7 @@ mDNSexport void CompleteDeregistration(m
     rr->resrec.RecordType = kDNSRecordTypeShared;
     rr->RequireGoodbye    = mDNSfalse;
     rr->WakeUp.HMAC       = zeroEthAddr;
-    if (rr->AnsweredLocalQ) { AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, mDNSfalse); rr->AnsweredLocalQ = mDNSfalse; }
+    if (rr->AnsweredLocalQ) { AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, QC_rmv); rr->AnsweredLocalQ = mDNSfalse; }
     mDNS_Deregister_internal(m, rr, mDNS_Dereg_normal);     // Don't touch rr after this
 }
 
@@ -2224,7 +2224,11 @@ mDNSlocal void SendNDP(mDNS *const m, co
     // *ptr++ = tpa->b[0xF];
 
     // 0x06 Source address (Note: Since we don't currently set the BIOCSHDRCMPLT option, BPF will fill in the real interface address for us)
-    for (i=0; i<6; i++) *ptr++ = (tha ? *tha : intf->MAC).b[i];
+    for (i=0; i<6; i++)
+	if (tha)
+	    *ptr++ = tha->b[i];
+	else
+	    *ptr++ = intf->MAC.b[i];
 
     // 0x0C IPv6 Ethertype (0x86DD)
     *ptr++ = 0x86; *ptr++ = 0xDD;
@@ -2261,7 +2265,11 @@ mDNSlocal void SendNDP(mDNS *const m, co
         {
             *ptr++ = NDP_SrcLL; // Option Type 1 == Source Link-layer Address
             *ptr++ = 0x01;      // Option length 1 (in units of 8 octets)
-            for (i=0; i<6; i++) *ptr++ = (tha ? *tha : intf->MAC).b[i];
+            for (i=0; i<6; i++)
+		if (tha)
+		    *ptr++ = tha->b[i];
+		else
+		    *ptr++ = intf->MAC.b[i];
         }
     }
     else            // Neighbor Advertisement. The NDP "target" is the address we're giving information about.
@@ -2271,7 +2279,11 @@ mDNSlocal void SendNDP(mDNS *const m, co
         // 0x4E Target Link-layer Address
         *ptr++ = NDP_TgtLL; // Option Type 2 == Target Link-layer Address
         *ptr++ = 0x01;      // Option length 1 (in units of 8 octets)
-        for (i=0; i<6; i++) *ptr++ = (tha ? *tha : intf->MAC).b[i];
+        for (i=0; i<6; i++)
+	    if (tha)
+		*ptr++ = tha->b[i];
+	    else
+		*ptr++ = intf->MAC.b[i];
     }
 
     // 0x4E or 0x56 Total NDP Packet length 78 or 86 bytes
@@ -4142,6 +4154,7 @@ mDNSlocal void CacheRecordAdd(mDNS *cons
     {
         if (ResourceRecordAnswersQuestion(&rr->resrec, q))
         {
+	    mDNSIPPort zp = zeroIPPort;
             // If this question is one that's actively sending queries, and it's received ten answers within one
             // second of sending the last query packet, then that indicates some radical network topology change,
             // so reset its exponential backoff back to the start. We must be at least at the eight-second interval
@@ -4164,7 +4177,7 @@ mDNSlocal void CacheRecordAdd(mDNS *cons
             verbosedebugf("CacheRecordAdd %p %##s (%s) %lu %#a:%d question %p", rr, rr->resrec.name->c,
                           DNSTypeName(rr->resrec.rrtype), rr->resrec.rroriginalttl, rr->resrec.rDNSServer ?
                           &rr->resrec.rDNSServer->addr : mDNSNULL, mDNSVal16(rr->resrec.rDNSServer ?
-                                                                             rr->resrec.rDNSServer->port : zeroIPPort), q);
+                                                                             rr->resrec.rDNSServer->port : zp), q);
             q->CurrentAnswers++;
 
             q->unansweredQueries = 0;
@@ -4261,10 +4274,12 @@ mDNSlocal void CacheRecordRmv(mDNS *cons
             q->FlappingInterface1 = mDNSNULL;
             q->FlappingInterface2 = mDNSNULL;
 
-            if (q->CurrentAnswers == 0)
+            if (q->CurrentAnswers == 0) {
+		mDNSIPPort zp = zeroIPPort;
                 LogMsg("CacheRecordRmv ERROR!!: How can CurrentAnswers already be zero for %p %##s (%s) DNSServer %#a:%d",
                        q, q->qname.c, DNSTypeName(q->qtype), q->qDNSServer ? &q->qDNSServer->addr : mDNSNULL,
-                       mDNSVal16(q->qDNSServer ? q->qDNSServer->port : zeroIPPort));
+                       mDNSVal16(q->qDNSServer ? q->qDNSServer->port : zp));
+	    }
             else
             {
                 q->CurrentAnswers--;
@@ -4519,7 +4534,7 @@ mDNSlocal mDNSBool AnswerQuestionWithLOR
                         m->CurrentRecord = mDNSNULL;
                         return mDNStrue;
                     }
-                    AnswerLocalQuestionWithLocalAuthRecord(m, rr, mDNStrue);
+                    AnswerLocalQuestionWithLocalAuthRecord(m, rr, QC_add);
                     if (m->CurrentQuestion != q)
                         break;     // If callback deleted q, then we're finished here
                 }
@@ -4762,7 +4777,7 @@ mDNSlocal void AnswerNewLocalOnlyQuestio
             m->CurrentRecord = rr->next;
             if (LocalOnlyRecordAnswersQuestion(rr, q))
             {
-                AnswerLocalQuestionWithLocalAuthRecord(m, rr, mDNStrue);
+                AnswerLocalQuestionWithLocalAuthRecord(m, rr, QC_add);
                 if (m->CurrentQuestion != q) break;     // If callback deleted q, then we're finished here
             }
         }
@@ -4778,7 +4793,7 @@ mDNSlocal void AnswerNewLocalOnlyQuestio
             m->CurrentRecord = rr->next;
             if (ResourceRecordAnswersQuestion(&rr->resrec, q))
             {
-                AnswerLocalQuestionWithLocalAuthRecord(m, rr, mDNStrue);
+                AnswerLocalQuestionWithLocalAuthRecord(m, rr, QC_add);
                 if (m->CurrentQuestion != q) break;     // If callback deleted q, then we're finished here
             }
         }
@@ -4996,7 +5011,7 @@ mDNSlocal void CheckRmvEventsForLocalRec
         {
             debugf("CheckRmvEventsForLocalRecords: Generating local RMV events for %s", ARDisplayString(m, rr));
             rr->resrec.RecordType = kDNSRecordTypeShared;
-            AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, mDNSfalse);
+            AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, QC_rmv);
             if (m->CurrentRecord == rr) // If rr still exists in list, restore its state now
             {
                 rr->resrec.RecordType = kDNSRecordTypeDeregistering;
@@ -5188,7 +5203,7 @@ mDNSexport mDNSs32 mDNS_Execute(mDNS *co
             if (LocalRecordReady(rr))
             {
                 debugf("mDNS_Execute: Delivering Add event with LocalAuthRecord %s", ARDisplayString(m, rr));
-                AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, mDNStrue);
+                AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, QC_add);
             }
             else if (!rr->next)
             {
@@ -5245,7 +5260,7 @@ mDNSexport mDNSs32 mDNS_Execute(mDNS *co
                         if (LocalRecordReady(rr))
                         {
                             debugf("mDNS_Execute: Delivering Add event with LocalAuthRecord %s", ARDisplayString(m, rr));
-                            AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, mDNStrue);
+                            AnswerAllLocalQuestionsWithLocalAuthRecord(m, rr, QC_add);
                         }
                         else LogMsg("mDNS_Execute: LocalOnlyRecord %s not ready", ARDisplayString(m, rr));
                     }
@@ -7867,7 +7882,10 @@ mDNSlocal DNSQuestion *ExpectingUnicastR
                     mDNSIPPort srcp;
                     if (!tcp)
                     {
-                        srcp = q->LocalSocket ? q->LocalSocket->port : zeroIPPort;
+			if (q->LocalSocket)
+                            srcp = q->LocalSocket->port;
+			else
+                            srcp = zeroIPPort;
                     }
                     else
                     {
@@ -9507,7 +9525,7 @@ mDNSlocal mDNSu8 *GetValueForMACAddr(mDN
     int     i;
     mDNSs8  hval   = 0;
     int     colons = 0;
-    mDNSu8  val    = 0;
+    mDNSu16  val    = 0; /* need to use 16 bit int to detect overflow */
 
     for (i = 0; ptr < limit && *ptr != ' ' && i < 17; i++, ptr++)
     {
@@ -9524,7 +9542,7 @@ mDNSlocal mDNSu8 *GetValueForMACAddr(mDN
                 LogMsg("GetValueForMACAddr: Address malformed colons %d val %d", colons, val);
                 return mDNSNULL;
             }
-            eth->b[colons] = val;
+            eth->b[colons] = (mDNSs8)val;
             colons++;
             val = 0;
         }
@@ -9534,7 +9552,7 @@ mDNSlocal mDNSu8 *GetValueForMACAddr(mDN
         LogMsg("GetValueForMACAddr: Address malformed colons %d", colons);
         return mDNSNULL;
     }
-    eth->b[colons] = val;
+    eth->b[colons] = (mDNSs8)val;
     return ptr;
 }
 
@@ -11381,6 +11399,7 @@ mDNSlocal void InitDNSConfig(mDNS *const
     if (!mDNSOpaque16IsZero(question->TargetQID))
     {
         mDNSu32 timeout = SetValidDNSServers(m, question);
+	mDNSIPPort zp = zeroIPPort;
         // We set the timeout whenever mDNS_StartQuery_internal is called. This means if we have
         // a networking change/search domain change that calls this function again we keep
         // reinitializing the timeout value which means it may never timeout. If this becomes
@@ -11399,7 +11418,7 @@ mDNSlocal void InitDNSConfig(mDNS *const
         LogInfo("InitDNSConfig: question %p %##s (%s) Timeout %d, DNS Server %#a:%d",
                  question, question->qname.c, DNSTypeName(question->qtype), timeout,
                  question->qDNSServer ? &question->qDNSServer->addr : mDNSNULL,
-                 mDNSVal16(question->qDNSServer ? question->qDNSServer->port : zeroIPPort));
+                 mDNSVal16(question->qDNSServer ? question->qDNSServer->port : zp));
     }
     else
     {
@@ -11631,12 +11650,13 @@ mDNSlocal void FinalizeUnicastQuestion(m
     // Ensure DNS related info of duplicate question is same as the orig question
     if (question->DuplicateOf)
     {
+	mDNSIPPort zp = zeroIPPort;
         question->validDNSServers = question->DuplicateOf->validDNSServers;
         question->qDNSServer = question->DuplicateOf->qDNSServer;
         LogInfo("FinalizeUnicastQuestion: Duplicate question %p (%p) %##s (%s), DNS Server %#a:%d",
                  question, question->DuplicateOf, question->qname.c, DNSTypeName(question->qtype),
                  question->qDNSServer ? &question->qDNSServer->addr : mDNSNULL,
-                 mDNSVal16(question->qDNSServer ? question->qDNSServer->port : zeroIPPort));
+                 mDNSVal16(question->qDNSServer ? question->qDNSServer->port : zp));
     }
 
     ActivateUnicastQuery(m, question, mDNSfalse);
@@ -11672,6 +11692,7 @@ mDNSexport mStatus mDNS_StartQuery_inter
     DNSQuestion **q;
     mStatus vStatus;
     mDNSBool purge;
+    mDNSOpaque16 zqid = zeroID;
 
     // First check for cache space (can't do queries if there is no cache space allocated)
     if (m->rrcache_size == 0)
@@ -11685,7 +11706,7 @@ mDNSexport mStatus mDNS_StartQuery_inter
 #ifndef UNICAST_DISABLED
                           (question->Target.type || Question_uDNS(question)) ? mDNS_NewMessageID(m) :
 #endif // UNICAST_DISABLED
-                          zeroID;
+                          zqid;
     debugf("mDNS_StartQuery_internal: %##s (%s)", question->qname.c, DNSTypeName(question->qtype));
 
     // Note: It important that new questions are appended at the *end* of the list, not prepended at the start
@@ -11801,11 +11822,11 @@ mDNSexport mStatus mDNS_StopQuery_intern
 #if TARGET_OS_WATCH
     if (question->InterfaceID != mDNSInterface_LocalOnly && question->InterfaceID != mDNSInterface_P2P && mDNSOpaque16IsZero(question->TargetQID))
     {
-    	if (m->NumAllInterfaceRecords + m->NumAllInterfaceQuestions == 1)
-    		m->NetworkChanged = m->timenow;
-    	m->NumAllInterfaceQuestions--;
-    	LogInfo("mDNS_StopQuery_internal:  NumAllInterfaceRecords %d NumAllInterfaceQuestions %d %##s (%s)",
-    		m->NumAllInterfaceRecords, m->NumAllInterfaceQuestions, question->qname.c, DNSTypeName(question->qtype));
+	if (m->NumAllInterfaceRecords + m->NumAllInterfaceQuestions == 1)
+		m->NetworkChanged = m->timenow;
+	m->NumAllInterfaceQuestions--;
+	LogInfo("mDNS_StopQuery_internal:  NumAllInterfaceRecords %d NumAllInterfaceQuestions %d %##s (%s)",
+		m->NumAllInterfaceRecords, m->NumAllInterfaceQuestions, question->qname.c, DNSTypeName(question->qtype));
     }
 #endif
 
@@ -11999,7 +12020,7 @@ mDNSexport mStatus mDNS_StopQueryWithRem
             {
                 // Don't use mDNS_DropLockBeforeCallback() here, since we don't allow API calls
                 if (question->QuestionCallback)
-                    question->QuestionCallback(m, question, &rr->resrec, mDNSfalse);
+                    question->QuestionCallback(m, question, &rr->resrec, QC_rmv);
             }
     }
     mDNS_Unlock(m);
@@ -12813,7 +12834,7 @@ mDNSexport void mDNS_DeactivateNetWake_i
         if (m->SPSBrowseCallback)
         {
             mDNS_DropLockBeforeCallback();      // Allow client to legally make mDNS API calls from the callback
-            m->SPSBrowseCallback(m, &set->NetWakeBrowse, mDNSNULL, mDNSfalse);
+            m->SPSBrowseCallback(m, &set->NetWakeBrowse, mDNSNULL, QC_rmv);
             mDNS_ReclaimLockAfterCallback();    // Decrement mDNS_reentrancy to block mDNS API calls again
         }
 
@@ -14709,10 +14730,21 @@ mDNSexport mStatus uDNS_SetupDNSConfig(m
             if (t != s)
             {
                 mDNSBool old, new;
+		mDNSIPPort tport, sport;
+
+		if (t)
+			tport = t->port;
+		else
+			tport = zeroIPPort;
+
+		if (s)
+			sport = s->port;
+		else
+			sport = zeroIPPort;
                 // If DNS Server for this question has changed, reactivate it
                 LogInfo("uDNS_SetupDNSConfig: Updating DNS Server from %#a:%d (%##s) to %#a:%d (%##s) for question %##s (%s) (scope:%p)",
-                        t ? &t->addr : mDNSNULL, mDNSVal16(t ? t->port : zeroIPPort), t ? t->domain.c : (mDNSu8*)"",
-                        s ? &s->addr : mDNSNULL, mDNSVal16(s ? s->port : zeroIPPort), s ? s->domain.c : (mDNSu8*)"",
+                        t ? &t->addr : mDNSNULL, mDNSVal16(tport), t ? t->domain.c : (mDNSu8*)"",
+                        s ? &s->addr : mDNSNULL, mDNSVal16(sport), s ? s->domain.c : (mDNSu8*)"",
                         q->qname.c, DNSTypeName(q->qtype), q->InterfaceID);
 
                 old = q->SuppressQuery;
@@ -14761,8 +14793,9 @@ mDNSexport mStatus uDNS_SetupDNSConfig(m
             }
             else
             {
+		mDNSIPPort zp = zeroIPPort;
                 debugf("uDNS_SetupDNSConfig: Not Updating DNS server question %p %##s (%s) DNS server %#a:%d %p %d",
-                       q, q->qname.c, DNSTypeName(q->qtype), t ? &t->addr : mDNSNULL, mDNSVal16(t ? t->port : zeroIPPort), q->DuplicateOf, q->SuppressUnusable);
+                       q, q->qname.c, DNSTypeName(q->qtype), t ? &t->addr : mDNSNULL, mDNSVal16(t ? t->port : zp), q->DuplicateOf, q->SuppressUnusable);
                 for (qptr = q->next ; qptr; qptr = qptr->next)
                     if (qptr->DuplicateOf == q) { qptr->validDNSServers = q->validDNSServers; qptr->qDNSServer = q->qDNSServer; }
             }
